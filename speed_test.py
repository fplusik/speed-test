#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
–ò–∑–º–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏, –≤—ã–≥—Ä—É–∑–∫–∏ –∏ –ø–∏–Ω–≥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import time
import requests
import threading
from statistics import mean, median
import json
from datetime import datetime
import os

class InternetSpeedTest:
    def __init__(self):
        self.test_urls = [
            "https://httpbin.org/bytes/1000000",  # 1MB —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            "https://httpbin.org/bytes/5000000",  # 5MB —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            "https://httpbin.org/bytes/10000000", # 10MB —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        ]
        self.ping_urls = [
            "https://www.google.com",
            "https://www.cloudflare.com",
            "https://www.github.com",
            "https://httpbin.org"
        ]
        self.results_file = "speed_test_history.json"
    
    def ping_test(self, url, timeout=5):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç ping (–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞) –¥–ª—è URL
        
        Args:
            url (str): URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            timeout (int): –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            float: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            start_time = time.time()
            response = requests.get(url, timeout=timeout, stream=True)
            response.raise_for_status()
            end_time = time.time()
            return (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        except Exception:
            return None
    
    def download_speed_test(self, url, timeout=30):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        
        Args:
            url (str): URL —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            timeout (int): –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ (—Å–∫–æ—Ä–æ—Å—Ç—å –≤ Mbps, —Ä–∞–∑–º–µ—Ä, –≤—Ä–µ–º—è)
        """
        try:
            start_time = time.time()
            response = requests.get(url, timeout=timeout, stream=True)
            response.raise_for_status()
            
            total_size = 0
            chunk_times = []
            
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    chunk_start = time.time()
                    total_size += len(chunk)
                    chunk_times.append(time.time() - chunk_start)
            
            end_time = time.time()
            total_time = end_time - start_time
            
            # –°–∫–æ—Ä–æ—Å—Ç—å –≤ –º–µ–≥–∞–±–∏—Ç–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É
            speed_mbps = (total_size * 8) / (total_time * 1000000)
            
            return {
                'success': True,
                'speed_mbps': speed_mbps,
                'size_bytes': total_size,
                'time_seconds': total_time,
                'size_mb': total_size / (1024 * 1024)
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'speed_mbps': 0,
                'size_bytes': 0,
                'time_seconds': 0
            }
    
    def upload_speed_test(self, size_mb=1, timeout=30):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ httpbin.org
        
        Args:
            size_mb (int): –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–ë
            timeout (int): –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = 'x' * (size_mb * 1024 * 1024)  # —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
            url = "https://httpbin.org/post"
            
            start_time = time.time()
            response = requests.post(
                url, 
                data={'data': test_data}, 
                timeout=timeout
            )
            response.raise_for_status()
            end_time = time.time()
            
            total_time = end_time - start_time
            data_size = len(test_data)
            
            # –°–∫–æ—Ä–æ—Å—Ç—å –≤ –º–µ–≥–∞–±–∏—Ç–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É
            speed_mbps = (data_size * 8) / (total_time * 1000000)
            
            return {
                'success': True,
                'speed_mbps': speed_mbps,
                'size_bytes': data_size,
                'time_seconds': total_time,
                'size_mb': size_mb
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'speed_mbps': 0,
                'size_bytes': 0,
                'time_seconds': 0
            }
    
    def comprehensive_ping_test(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("üèì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping...")
        
        results = {}
        for url in self.ping_urls:
            print(f"   –¢–µ—Å—Ç–∏—Ä—É—é {url}...")
            pings = []
            
            for i in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                ping = self.ping_test(url)
                if ping is not None:
                    pings.append(ping)
                time.sleep(0.5)
            
            if pings:
                results[url] = {
                    'pings': pings,
                    'avg': mean(pings),
                    'min': min(pings),
                    'max': max(pings),
                    'median': median(pings)
                }
            else:
                results[url] = {
                    'error': '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã'
                }
        
        return results
    
    def comprehensive_speed_test(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        print("üöÄ –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –ò–ù–¢–ï–†–ù–ï–¢–ê")
        print("=" * 50)
        
        # –¢–µ—Å—Ç –ø–∏–Ω–≥–∞
        ping_results = self.comprehensive_ping_test()
        
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        print("\nüì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏...")
        download_results = []
        
        for url in self.test_urls:
            print(f"   –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
            result = self.download_speed_test(url)
            if result['success']:
                download_results.append(result)
                print(f"   ‚úÖ {result['speed_mbps']:.2f} Mbps ({result['size_mb']:.1f} MB)")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            time.sleep(1)
        
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
        print("\nüì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏...")
        upload_result = self.upload_speed_test(1)  # 1MB —Ç–µ—Å—Ç
        if upload_result['success']:
            print(f"   ‚úÖ {upload_result['speed_mbps']:.2f} Mbps ({upload_result['size_mb']} MB)")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        test_result = {
            'timestamp': datetime.now().isoformat(),
            'ping': ping_results,
            'download': download_results,
            'upload': upload_result
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_test_result(test_result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.display_results(test_result)
        
        return test_result
    
    def display_results(self, result):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥–∞
        print("\nüèì PING (–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞):")
        print("-" * 30)
        
        valid_pings = []
        for url, data in result['ping'].items():
            if 'avg' in data:
                print(f"{url}:")
                print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ: {data['avg']:.1f} –º—Å")
                print(f"  ‚ö° –õ—É—á—à–µ–µ: {data['min']:.1f} –º—Å")
                print(f"  üêå –•—É–¥—à–µ–µ: {data['max']:.1f} –º—Å")
                valid_pings.append(data['avg'])
            else:
                print(f"{url}: ‚ùå {data.get('error', '–û—à–∏–±–∫–∞')}")
        
        if valid_pings:
            overall_ping = mean(valid_pings)
            print(f"\nüéØ –û–±—â–∏–π ping: {overall_ping:.1f} –º—Å")
            
            if overall_ping < 20:
                print("   üü¢ –û—Ç–ª–∏—á–Ω–æ!")
            elif overall_ping < 50:
                print("   üü° –•–æ—Ä–æ—à–æ")
            elif overall_ping < 100:
                print("   üü† –ü—Ä–∏–µ–º–ª–µ–º–æ")
            else:
                print("   üî¥ –ü–ª–æ—Ö–æ")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        print(f"\nüì• –°–ö–û–†–û–°–¢–¨ –ó–ê–ì–†–£–ó–ö–ò:")
        print("-" * 30)
        
        if result['download']:
            speeds = [r['speed_mbps'] for r in result['download'] if r['success']]
            if speeds:
                avg_download = mean(speeds)
                max_download = max(speeds)
                print(f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_download:.2f} Mbps")
                print(f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_download:.2f} Mbps")
                
                if avg_download >= 100:
                    print("   üü¢ –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ!")
                elif avg_download >= 25:
                    print("   üü° –ë—ã—Å—Ç—Ä–æ")
                elif avg_download >= 5:
                    print("   üü† –°—Ä–µ–¥–Ω–µ")
                else:
                    print("   üî¥ –ú–µ–¥–ª–µ–Ω–Ω–æ")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏")
        else:
            print("‚ùå –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
        print(f"\nüì§ –°–ö–û–†–û–°–¢–¨ –í–´–ì–†–£–ó–ö–ò:")
        print("-" * 30)
        
        if result['upload']['success']:
            upload_speed = result['upload']['speed_mbps']
            print(f"üìä –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏: {upload_speed:.2f} Mbps")
            
            if upload_speed >= 10:
                print("   üü¢ –•–æ—Ä–æ—à–æ!")
            elif upload_speed >= 5:
                print("   üü° –ü—Ä–∏–µ–º–ª–µ–º–æ")
            elif upload_speed >= 1:
                print("   üü† –ú–µ–¥–ª–µ–Ω–Ω–æ")
            else:
                print("   üî¥ –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['upload'].get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def save_test_result(self, result):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            history = []
            if os.path.exists(self.results_file):
                with open(self.results_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
            
            history.append(result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if len(history) > 50:
                history = history[-50:]
            
            with open(self.results_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def show_history(self, limit=10):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤"""
        try:
            if not os.path.exists(self.results_file):
                print("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞.")
                return
            
            with open(self.results_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
            
            if not history:
                print("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞.")
                return
            
            print(f"\nüìà –ò–°–¢–û–†–ò–Ø –¢–ï–°–¢–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {min(limit, len(history))})")
            print("=" * 60)
            
            for i, test in enumerate(history[-limit:], 1):
                timestamp = datetime.fromisoformat(test['timestamp']).strftime('%Y-%m-%d %H:%M')
                
                # –°—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–≥
                ping_values = []
                for url_data in test['ping'].values():
                    if 'avg' in url_data:
                        ping_values.append(url_data['avg'])
                avg_ping = mean(ping_values) if ping_values else 0
                
                # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
                download_speeds = [r['speed_mbps'] for r in test['download'] if r['success']]
                avg_download = mean(download_speeds) if download_speeds else 0
                
                # –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏
                upload_speed = test['upload']['speed_mbps'] if test['upload']['success'] else 0
                
                print(f"{i}. {timestamp}")
                print(f"   üèì Ping: {avg_ping:.1f} –º—Å")
                print(f"   üì• –ó–∞–≥—Ä—É–∑–∫–∞: {avg_download:.1f} Mbps")
                print(f"   üì§ –í—ã–≥—Ä—É–∑–∫–∞: {upload_speed:.1f} Mbps")
                print()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def main():
    speed_test = InternetSpeedTest()
    
    print("=== –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –ò–ù–¢–ï–†–ù–ï–¢–ê ===\n")
    
    while True:
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏")
        print("2. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞")
        print("3. –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏")
        print("4. –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏")
        print("5. –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤")
        print("6. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ")
        
        if choice == "1":
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
            
            if confirm.lower() == 'y':
                speed_test.comprehensive_speed_test()
            else:
                print("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
                
        elif choice == "2":
            results = speed_test.comprehensive_ping_test()
            valid_pings = []
            
            print("\nüèì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ping:")
            for url, data in results.items():
                if 'avg' in data:
                    print(f"{url}: {data['avg']:.1f} –º—Å")
                    valid_pings.append(data['avg'])
                else:
                    print(f"{url}: ‚ùå –û—à–∏–±–∫–∞")
            
            if valid_pings:
                print(f"\nüéØ –°—Ä–µ–¥–Ω–∏–π ping: {mean(valid_pings):.1f} –º—Å")
                
        elif choice == "3":
            print("\nüì• –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏...")
            url = speed_test.test_urls[1]  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            result = speed_test.download_speed_test(url)
            
            if result['success']:
                print(f"‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {result['speed_mbps']:.2f} Mbps")
                print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {result['size_mb']:.1f} MB –∑–∞ {result['time_seconds']:.1f} —Å–µ–∫")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        elif choice == "4":
            print("\nüì§ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏...")
            result = speed_test.upload_speed_test(0.5)  # 0.5 MB —Ç–µ—Å—Ç
            
            if result['success']:
                print(f"‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏: {result['speed_mbps']:.2f} Mbps")
                print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['size_mb']} MB –∑–∞ {result['time_seconds']:.1f} —Å–µ–∫")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        elif choice == "5":
            try:
                limit = int(input("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or "10")
                speed_test.show_history(limit)
            except ValueError:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                
        elif choice == "6":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üåê")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        print("\n" + "="*50 + "\n")

if __name__ == "__main__":
    main()
