package main

import (
	"bufio"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä—ã
type Character struct {
	Name     string
	Health   int
	MaxHealth int
	Attack   int
	Defense  int
	Level    int
	Experience int
	Inventory []string
}

type Monster struct {
	Name    string
	Health  int
	Attack  int
	Defense int
	Reward  int
}

type Room struct {
	Description string
	Exits       map[string]int
	HasMonster  bool
	Monster     *Monster
	HasTreasure bool
	Treasure    string
	Visited     bool
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	player Character
	rooms  []Room
	currentRoom int
	gameRunning bool
)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
func initGame() {
	player = Character{
		Name:      "–ì–µ—Ä–æ–π",
		Health:    100,
		MaxHealth: 100,
		Attack:    20,
		Defense:   10,
		Level:     1,
		Experience: 0,
		Inventory: []string{"–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "–•–ª–µ–±"},
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
	rooms = []Room{
		{
			Description: "üèõÔ∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä–µ–≤–Ω–µ–º —Ö—Ä–∞–º–µ. –ö–∞–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫.",
			Exits:       map[string]int{"—Å–µ–≤–µ—Ä": 1, "–≤–æ—Å—Ç–æ–∫": 2},
			HasTreasure: true,
			Treasure:    "–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∫–ª—é—á",
		},
		{
			Description: "üå≤ –¢–µ–º–Ω—ã–π –ª–µ—Å –æ–∫—Ä—É–∂–∞–µ—Ç –≤–∞—Å. –°–ª—ã—à–Ω—ã —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏.",
			Exits:       map[string]int{"—é–≥": 0, "—Å–µ–≤–µ—Ä": 3},
			HasMonster:  true,
			Monster: &Monster{
				Name:    "–õ–µ—Å–Ω–æ–π –≤–æ–ª–∫",
				Health:  30,
				Attack:  15,
				Defense: 5,
				Reward:  25,
			},
		},
		{
			Description: "üè∞ –ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –±–∞—à–Ω—è –≤–æ–∑–≤—ã—à–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤–∞–º–∏.",
			Exits:       map[string]int{"–∑–∞–ø–∞–¥": 0, "—Å–µ–≤–µ—Ä": 4},
			HasTreasure: true,
			Treasure:    "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫",
		},
		{
			Description: "‚õ∞Ô∏è –ì–æ—Ä–Ω–∞—è –ø–µ—â–µ—Ä–∞. –ö–∞–ø–ª–∏ —ç—Ö–æ–º –æ—Ç–¥–∞—é—Ç—Å—è –≤ —Ç–µ–º–Ω–æ—Ç–µ.",
			Exits:       map[string]int{"—é–≥": 1},
			HasMonster:  true,
			Monster: &Monster{
				Name:    "–ü–µ—â–µ—Ä–Ω—ã–π —Ç—Ä–æ–ª–ª—å",
				Health:  50,
				Attack:  25,
				Defense: 8,
				Reward:  50,
			},
		},
		{
			Description: "üè∫ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞! –ó–æ–ª–æ—Ç–æ –±–ª–µ—Å—Ç–∏—Ç –≤ –ª—É—á–∞—Ö —Å–≤–µ—Ç–∞.",
			Exits:       map[string]int{"—é–≥": 2},
			HasTreasure: true,
			Treasure:    "–ó–æ–ª–æ—Ç–æ–π –º–µ—á (+10 –∞—Ç–∞–∫–∞)",
		},
	}

	currentRoom = 0
	gameRunning = true
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
func main() {
	fmt.Println("üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –¢–ï–ö–°–¢–û–í–£–Æ RPG!")
	fmt.Println("=====================================")
	fmt.Println()

	rand.Seed(time.Now().UnixNano())
	initGame()

	scanner := bufio.NewScanner(os.Stdin)

	for gameRunning {
		showRoom()
		fmt.Print("\n> ")
		
		if scanner.Scan() {
			command := strings.ToLower(strings.TrimSpace(scanner.Text()))
			processCommand(command)
		}
	}

	fmt.Println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üëã")
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
func showRoom() {
	room := &rooms[currentRoom]
	
	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println(room.Description)
	
	if !room.Visited {
		room.Visited = true
		player.Experience += 5
		fmt.Println("‚ú® +5 –æ–ø—ã—Ç–∞ –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥—ã
	fmt.Print("üö™ –í—ã—Ö–æ–¥—ã: ")
	for direction := range room.Exits {
		fmt.Print(direction + " ")
	}
	fmt.Println()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–Ω—Å—Ç—Ä–∞
	if room.HasMonster && room.Monster.Health > 0 {
		fmt.Printf("‚öîÔ∏è  –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è %s (HP: %d)\n", 
			room.Monster.Name, room.Monster.Health)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–æ–≤–∏—â–µ
	if room.HasTreasure {
		fmt.Printf("üíé –ó–¥–µ—Å—å –ª–µ–∂–∏—Ç: %s\n", room.Treasure)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
	fmt.Printf("\nüë§ %s | HP: %d/%d | –£—Ä–æ–≤–µ–Ω—å: %d | –û–ø—ã—Ç: %d\n", 
		player.Name, player.Health, player.MaxHealth, player.Level, player.Experience)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
func processCommand(command string) {
	parts := strings.Split(command, " ")
	action := parts[0]

	switch action {
	case "—Å–µ–≤–µ—Ä", "—é–≥", "–≤–æ—Å—Ç–æ–∫", "–∑–∞–ø–∞–¥":
		move(action)
	case "–∞—Ç–∞–∫–∞", "–±–∏—Ç—å":
		attack()
	case "–≤–∑—è—Ç—å":
		takeTreasure()
	case "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "inv":
		showInventory()
	case "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å":
		if len(parts) > 1 {
			useItem(strings.Join(parts[1:], " "))
		} else {
			fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—Ç–æ?")
		}
	case "—Å—Ç–∞—Ç—É—Å":
		showStatus()
	case "–ø–æ–º–æ—â—å", "help":
		showHelp()
	case "–≤—ã—Ö–æ–¥", "quit":
		gameRunning = false
	default:
		fmt.Println("–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
	checkLevelUp()
}

// –î–≤–∏–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏
func move(direction string) {
	room := &rooms[currentRoom]
	
	if nextRoom, exists := room.Exits[direction]; exists {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∂–∏–≤–æ–π –º–æ–Ω—Å—Ç—Ä
		if room.HasMonster && room.Monster.Health > 0 {
			fmt.Println("‚ùå " + room.Monster.Name + " –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—É—Ç—å! –í—ã –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–∂–∞—Ç—å—Å—è!")
			return
		}
		
		currentRoom = nextRoom
		fmt.Printf("üö∂ –í—ã –∏–¥–µ—Ç–µ –Ω–∞ %s...\n", direction)
		
		// –°–ª—É—á–∞–π–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞
		if rand.Intn(10) < 2 {
			randomEvent()
		}
	} else {
		fmt.Println("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
	}
}

// –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
func attack() {
	room := &rooms[currentRoom]
	
	if !room.HasMonster || room.Monster.Health <= 0 {
		fmt.Println("‚ùå –ó–¥–µ—Å—å –Ω–µ–∫–æ–≥–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å.")
		return
	}

	monster := room.Monster
	
	// –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
	damage := player.Attack + rand.Intn(10) - monster.Defense
	if damage < 0 {
		damage = 0
	}
	
	monster.Health -= damage
	fmt.Printf("‚öîÔ∏è  –í—ã –∞—Ç–∞–∫—É–µ—Ç–µ %s –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ %d —É—Ä–æ–Ω–∞!\n", monster.Name, damage)

	if monster.Health <= 0 {
		fmt.Printf("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ %s!\n", monster.Name)
		player.Experience += monster.Reward
		fmt.Printf("‚ú® +%d –æ–ø—ã—Ç–∞!\n", monster.Reward)
		
		// –°–ª—É—á–∞–π–Ω–∞—è –¥–æ–±—ã—á–∞
		if rand.Intn(3) == 0 {
			loot := []string{"–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ó–æ–ª–æ—Ç–æ", "–ó–µ–ª—å–µ —Å–∏–ª—ã"}
			item := loot[rand.Intn(len(loot))]
			player.Inventory = append(player.Inventory, item)
			fmt.Printf("üí∞ –í—ã –Ω–∞—à–ª–∏: %s\n", item)
		}
		return
	}

	// –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
	monsterDamage := monster.Attack + rand.Intn(8) - player.Defense
	if monsterDamage < 0 {
		monsterDamage = 0
	}
	
	player.Health -= monsterDamage
	fmt.Printf("üí• %s –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç %d —É—Ä–æ–Ω–∞!\n", monster.Name, monsterDamage)

	if player.Health <= 0 {
		fmt.Println("üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
		gameRunning = false
	}
}

// –í–∑—è—Ç—å —Å–æ–∫—Ä–æ–≤–∏—â–µ
func takeTreasure() {
	room := &rooms[currentRoom]
	
	if !room.HasTreasure {
		fmt.Println("‚ùå –ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ.")
		return
	}

	fmt.Printf("‚ú® –í—ã –≤–∑—è–ª–∏: %s\n", room.Treasure)
	
	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
	if strings.Contains(room.Treasure, "–ó–æ–ª–æ—Ç–æ–π –º–µ—á") {
		player.Attack += 10
		fmt.Println("‚öîÔ∏è  –í–∞—à–∞ –∞—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 10!")
	}
	
	player.Inventory = append(player.Inventory, room.Treasure)
	room.HasTreasure = false
	room.Treasure = ""
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
func showInventory() {
	fmt.Println("\nüéí –ò–ù–í–ï–ù–¢–ê–†–¨:")
	if len(player.Inventory) == 0 {
		fmt.Println("  (–ø—É—Å—Ç–æ)")
		return
	}
	
	for i, item := range player.Inventory {
		fmt.Printf("  %d. %s\n", i+1, item)
	}
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
func useItem(itemName string) {
	for i, item := range player.Inventory {
		if strings.Contains(strings.ToLower(item), strings.ToLower(itemName)) {
			fmt.Printf("üß™ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ: %s\n", item)
			
			switch {
			case strings.Contains(item, "–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è"):
				heal := 30
				player.Health += heal
				if player.Health > player.MaxHealth {
					player.Health = player.MaxHealth
				}
				fmt.Printf("üíö –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ %d –∑–¥–æ—Ä–æ–≤—å—è!\n", heal)
				
			case strings.Contains(item, "–ó–µ–ª—å–µ —Å–∏–ª—ã"):
				player.Attack += 5
				fmt.Println("üí™ –í–∞—à–∞ —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 5!")
				
			case strings.Contains(item, "–•–ª–µ–±"):
				player.Health += 10
				if player.Health > player.MaxHealth {
					player.Health = player.MaxHealth
				}
				fmt.Println("üçû –í—ã –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–∫—Ä–µ–ø–∏–ª–∏—Å—å (+10 HP)")
				
			default:
				fmt.Println("‚ùì –í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.")
				return
			}
			
			// –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
			player.Inventory = append(player.Inventory[:i], player.Inventory[i+1:]...)
			return
		}
	}
	
	fmt.Println("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
func showStatus() {
	fmt.Println("\nüìä –°–¢–ê–¢–£–° –ü–ï–†–°–û–ù–ê–ñ–ê:")
	fmt.Printf("  –ò–º—è: %s\n", player.Name)
	fmt.Printf("  –ó–¥–æ—Ä–æ–≤—å–µ: %d/%d\n", player.Health, player.MaxHealth)
	fmt.Printf("  –ê—Ç–∞–∫–∞: %d\n", player.Attack)
	fmt.Printf("  –ó–∞—â–∏—Ç–∞: %d\n", player.Defense)
	fmt.Printf("  –£—Ä–æ–≤–µ–Ω—å: %d\n", player.Level)
	fmt.Printf("  –û–ø—ã—Ç: %d\n", player.Experience)
	fmt.Printf("  –ü—Ä–µ–¥–º–µ—Ç–æ–≤: %d\n", len(player.Inventory))
}

// –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
func randomEvent() {
	events := []string{
		"–í—ã –Ω–∞—à–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞!",
		"–°—Ç—Ä–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è.",
		"–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –º–∞–≥–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –≤ –≤–æ–∑–¥—É—Ö–µ.",
		"–•–æ–ª–æ–¥–Ω—ã–π –≤–µ—Ç–µ—Ä –ø—Ä–æ–±–∏—Ä–∞–µ—Ç –¥–æ –∫–æ—Å—Ç–µ–π.",
		"–í—ã —Å–ª—ã—à–∏—Ç–µ –¥–∞–ª–µ–∫–∏–π —Ä–µ–≤ –¥—Ä–∞–∫–æ–Ω–∞.",
	}
	
	event := events[rand.Intn(len(events))]
	fmt.Printf("üé≤ %s\n", event)
	
	if event == events[0] { // –ó–æ–ª–æ—Ç–æ
		player.Inventory = append(player.Inventory, "–ó–æ–ª–æ—Ç–æ")
	} else if event == events[1] { // –¢–æ—Ä–≥–æ–≤–µ—Ü
		player.Inventory = append(player.Inventory, "–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è")
	}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
func checkLevelUp() {
	requiredExp := player.Level * 100
	
	if player.Experience >= requiredExp {
		player.Level++
		player.MaxHealth += 20
		player.Health = player.MaxHealth
		player.Attack += 5
		player.Defense += 2
		player.Experience -= requiredExp
		
		fmt.Printf("\nüéä –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø!\n")
		fmt.Printf("üÜô –¢–µ–ø–µ—Ä—å –≤—ã %d —É—Ä–æ–≤–Ω—è!\n", player.Level)
		fmt.Printf("üí™ –ê—Ç–∞–∫–∞: +5, –ó–∞—â–∏—Ç–∞: +2, –ó–¥–æ—Ä–æ–≤—å–µ: +20\n")
	}
}

// –°–ø—Ä–∞–≤–∫–∞
func showHelp() {
	fmt.Println("\nüìñ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
	fmt.Println("  —Å–µ–≤–µ—Ä/—é–≥/–≤–æ—Å—Ç–æ–∫/–∑–∞–ø–∞–¥ - –¥–≤–∏–∂–µ–Ω–∏–µ")
	fmt.Println("  –∞—Ç–∞–∫–∞ - –∞—Ç–∞–∫–æ–≤–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–∞")
	fmt.Println("  –≤–∑—è—Ç—å - –≤–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
	fmt.Println("  –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
	fmt.Println("  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
	fmt.Println("  —Å—Ç–∞—Ç—É—Å - –ø–æ–∫–∞–∑–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
	fmt.Println("  –ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
	fmt.Println("  –≤—ã—Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É")
}
